// A plugin for TinyMCE that adds the option to place a Font Awesome (6 or 7) icon.
//
// Made by Thomas Foss @ catchmedia.no
// V. 1.0 (25.09.2025)
//
// You need to do three things to activate it:
// 1. Add "faicon" to the system setting tinymcerte.plugins
// 2. Add "faicon" to the toolbar setting, for example tinymcerte.toolbar1
// 3. Add "{"extended_valid_elements": "i[*]"}" to tinymcerte.settings
//
// You will also need somehow to load Font Awesome into the backend (both the editor and Manager):
// 1. Editor: tinymcerte.content_css
// 2. Manager: Use the plugin ManagerInjector

tinymce.PluginManager.add('faicon', function (editor) {
    const KNOWN_STYLES = ['fa-solid', 'fa-regular', 'fa-light', 'fa-thin', 'fa-brands'];
    const ZWSP = '\u200B';

    /**
     * Injects a CSS override so TinyMCE's dialog skin (.tox) doesn’t force
     * font-family/weight that break Font Awesome. Also adds a tiny margin for preview icons.
     * Safe to call multiple times.
     */
    function ensureFaFixCss() {
        if (document.getElementById('faicon-tinymce-fa-fix')) return;
        const css = `
      /* Let Font Awesome keep its own font-family/weight inside TinyMCE dialogs */
      .tox .fa,
      .tox .fa::before,
      .tox [class^="fa-"],
      .tox [class^="fa-"]::before,
      .tox [class*=" fa-"],
      .tox [class*=" fa-"]::before {
        font-family: var(--fa-style-family, "Font Awesome 7 Pro","Font Awesome 7 Free","Font Awesome 6 Pro","Font Awesome 6 Free") !important;
        font-style: normal !important;
        font-weight: var(--fa-style, 900) !important;
      }
      .tox .fa-solid,  .tox .fa-solid::before  { font-weight: 900 !important; }
      .tox .fa-regular,.tox .fa-regular::before{ font-weight: 400 !important; }
      .tox .fa-light,  .tox .fa-light::before  { font-weight: 300 !important; }
      .tox .fa-thin,   .tox .fa-thin::before   { font-weight: 100 !important; }
      .tox .fa-brands, .tox .fa-brands::before {
        font-family: "Font Awesome 7 Brands","Font Awesome 6 Brands" !important;
        font-weight: 400 !important;
      }
      /* A bit of visual spacing for icons in dialogs */
      .tox i[class*="fa-"] { margin: 0 .2em !important; }
    `;
        const style = document.createElement('style');
        style.id = 'faicon-tinymce-fa-fix';
        style.textContent = css;
        document.head.appendChild(style);
    }
    ensureFaFixCss();

    /**
     * Inject a margin rule into the editor’s content document (once per editor).
     * Keeps caret behavior tidy without relying on visible spaces.
     */
    function ensureFaContentMargin() {
        const doc = editor.getDoc();
        if (!doc) return;
        const styleId = `faicon-content-margin-${editor.id}`;
        if (doc.getElementById(styleId)) return;

        const css = 'i[class*="fa-"]{margin:0 .2em;}';
        const styleEl = doc.createElement('style');
        styleEl.id = styleId;
        styleEl.type = 'text/css';
        styleEl.appendChild(doc.createTextNode(css));
        doc.head.appendChild(styleEl);
    }
    editor.on('init', ensureFaContentMargin);

    /**
     * Returns the selected <i.fa-*>, also when caret is on the adjacent ZWSP text node.
     * This makes toolbar toggling and editing more reliable.
     */
    function getSelectedFaIcon() {
        const sel = editor.selection;
        let node = sel.getNode();
        if (!node) return null;

        const isFaI = (el) => el && el.nodeType === 1 && el.nodeName === 'I' && /\bfa-/.test(el.className);

        if (node.nodeType === 3) { // text node (possibly our ZWSP)
            const text = node.nodeValue || '';
            if (text === ZWSP || text.trim() === '') {
                if (isFaI(node.previousSibling)) return node.previousSibling;
                if (isFaI(node.nextSibling)) return node.nextSibling;
                const rng = sel.getRng && sel.getRng();
                const container = node.parentNode;
                if (rng && container) {
                    // If caret is at the start/end of this text node, also check element siblings.
                    if (rng.collapsed && rng.startOffset === 0 && isFaI(container.previousSibling)) return container.previousSibling;
                    if (rng.collapsed && rng.startOffset === text.length && isFaI(container.nextSibling)) return container.nextSibling;
                }
            }
            node = node.parentNode;
        }

        if (isFaI(node)) return node;
        return null;
    }

    /** Build class list from dialog data. */
    function buildClasses(data) {
        const styleClass = data.style || 'fa-solid';
        const iconClass = data.icon ? `fa-${data.icon.trim()}` : '';
        const extra = (data.extraClasses || '').trim();
        return [styleClass, iconClass, extra].filter(Boolean).join(' ');
    }

    /** Open the insert/edit dialog. */
    function openIconDialog(existingElm) {
        // Extract current classes if editing an existing <i>
        let currentStyle = 'fa-solid', currentIcon = '', currentExtra = '';
        if (existingElm && existingElm.nodeName === 'I') {
            const classList = existingElm.className.split(/\s+/);
            currentStyle = classList.find(c => KNOWN_STYLES.includes(c)) || 'fa-solid';
            currentIcon = classList.find(c => c.startsWith('fa-') && !KNOWN_STYLES.includes(c))?.replace(/^fa-/, '') || '';
            currentExtra = classList.filter(c => !KNOWN_STYLES.includes(c) && c !== `fa-${currentIcon}`).join(' ');
        }

        const makeBody = (cls) => ({
            type: 'panel',
            items: [
                {
                    type: 'htmlpanel',
                    name: 'preview',
                    html: `
                        <div style="display:flex;align-items:center;gap:12px;margin-bottom:8px;padding:10px;border:1px solid #ddd;border-radius:8px;">
                            <i id="faicon-preview-icon" class="${cls}" style="font-size:24px;line-height:1;"></i>
                            <div style="font-size:12px;opacity:.8">
                                <div><strong>Preview</strong></div>
                                <div id="faicon-preview-classes">${cls || '(choose style + icon)'}</div>
                            </div>
                        </div>
                    `
                },
                {
                    type: 'selectbox',
                    name: 'style',
                    label: 'Style',
                    items: [
                        { text: 'Solid', value: 'fa-solid' },
                        { text: 'Regular', value: 'fa-regular' },
                        { text: 'Light', value: 'fa-light' },
                        { text: 'Thin', value: 'fa-thin' },
                        { text: 'Brands', value: 'fa-brands' }
                    ]
                },
                { type: 'input', name: 'icon', label: 'Icon name', placeholder: 'e.g. house' },
                { type: 'input', name: 'extraClasses', label: 'Extra classes (optional)', placeholder: 'fa-xl me-2 …' }
            ]
        });

        const initialData = { style: currentStyle, icon: currentIcon, extraClasses: currentExtra };
        const initialCls = buildClasses(initialData);

        editor.windowManager.open({
            title: existingElm ? 'Edit Font Awesome Icon' : 'Insert Font Awesome Icon',
            size: 'normal',
            body: makeBody(initialCls),
            initialData,
            buttons: [
                { type: 'cancel', text: 'Cancel' },
                { type: 'submit', text: existingElm ? 'Update' : 'Insert', primary: true }
            ],

            // Live-update preview (no re-dial to keep inputs focused)
            onChange(api, details) {
                if (!['style', 'icon', 'extraClasses'].includes(details.name)) return;
                const data = api.getData();
                const cls = buildClasses(data) || 'fa-solid';
                const iconEl = document.getElementById('faicon-preview-icon');
                const textEl = document.getElementById('faicon-preview-classes');
                if (iconEl) iconEl.className = cls;
                if (textEl) textEl.textContent = cls;
            },

            onSubmit(api) {
                const data = api.getData();
                const cls = buildClasses(data);

                if (!/\bfa-/.test(cls)) {
                    editor.windowManager.alert('Choose at least one icon class (e.g. icon name "house").');
                    return;
                }

                // Insert/update with no visible inner space; caret anchors are ZWSP outside the <i>
                if (existingElm) {
                    existingElm.className = cls;
                    existingElm.innerHTML = '';
                    existingElm.setAttribute('aria-hidden', 'true');
                } else {
                    editor.insertContent(`${ZWSP}<i class="${cls}" aria-hidden="true"></i>${ZWSP}`);
                }
                api.close();
            }
        });
    }

    /** Command: open dialog (insert or edit). */
    editor.addCommand('faiconOpen', () => {
        const existing = getSelectedFaIcon();
        openIconDialog(existing);
    });

    // Toggle button with active state when cursor is on/next to an <i.fa-*>
    editor.ui.registry.addToggleButton('faicon', {
        text: 'Icon',
        icon: 'emoji',
        tooltip: 'Insert/Edit Font Awesome icon',
        onAction: () => editor.execCommand('faiconOpen'),
        onSetup: (api) => {
            const handler = () => {
                const isFa = !!getSelectedFaIcon();
                api.setActive(isFa);
                if (api.setEnabled) api.setEnabled(true);
            };
            editor.on('NodeChange', handler);
            return () => editor.off('NodeChange', handler);
        }
    });

    editor.ui.registry.addMenuItem('editfaicon', {
        text: 'Edit Font Awesome Icon',
        icon: 'emoji',
        onAction: () => editor.execCommand('faiconOpen')
    });

    editor.ui.registry.addContextMenu('faicon', {
        update: (elm) => {
            if (elm && elm.nodeName === 'I' && /\bfa-/.test(elm.className)) {
                editor.selection.select(elm);
                return ['editfaicon'];
            }
            return [];
        }
    });

    // Convenience: clicking/double-clicking the icon selects/edits it
    editor.on('click', (e) => {
        if (e.target && e.target.nodeName === 'I' && /\bfa-/.test(e.target.className)) {
            editor.selection.select(e.target);
        }
    });
    editor.on('DblClick', (e) => {
        if (e.target && e.target.nodeName === 'I' && /\bfa-/.test(e.target.className)) {
            editor.selection.select(e.target);
            editor.execCommand('faiconOpen');
        }
    });

    editor.addShortcut('meta+shift+i', 'Insert/Edit Font Awesome icon', () => editor.execCommand('faiconOpen'));
});